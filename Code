# Import necessary modules from Flask
from flask import Flask, jsonify, request

# Initialize the Flask application
app = Flask(__name__)

# --- In-Memory "Database" ---
# A simple list of dictionaries to store user data.
users = [
    {
        "id": 1,
        "username": "bhushan",
        "email": "bhushan@example.com"
    },
    {
        "id": 2,
        "username": "baby",
        "email": "baby@example.com"
    }
]
# A counter to simulate auto-incrementing IDs for new users
next_user_id = 3

# --- API Routes (Endpoints) ---

## CREATE (POST) ##
# Route to create a new user
@app.route('/users', methods=['POST'])
def create_user():
    global next_user_id  # Use the global counter
    
    # Get the JSON data from the request body
    data = request.json
    
    # Basic validation
    if not data or 'username' not in data or 'email' not in data:
        return jsonify({'error': 'Missing required fields: username and email'}), 400
    
    # Create the new user dictionary
    new_user = {
        "id": next_user_id,
        "username": data['username'],
        "email": data['email']
    }
    
    # Add the new user to our "database"
    users.append(new_user)
    
    # Increment the ID counter
    next_user_id += 1
    
    # Return the newly created user with a 201 (Created) status code
    return jsonify(new_user), 201

## READ (GET) ##
# Route to get all users
@app.route('/users', methods=['GET'])
def get_all_users():
    # Return the full list of users as JSON
    return jsonify(users)

# Route to get a single user by their ID
@app.route('/users/<int:user_id>', methods=['GET'])
def get_user(user_id):
    # Find the user in the list by their ID
    # Use a generator expression and next() for efficient searching
    user = next((user for user in users if user['id'] == user_id), None)
    
    if user:
        # If the user is found, return their data
        return jsonify(user)
    else:
        # If not found, return a 404 (Not Found) error
        return jsonify({'error': 'User not found'}), 404

## UPDATE (PUT) ##
# Route to update an existing user
@app.route('/users/<int:user_id>', methods=['PUT'])
def update_user(user_id):
    # Find the user to update
    user = next((user for user in users if user['id'] == user_id), None)
    
    if not user:
        # If user doesn't exist, return 404
        return jsonify({'error': 'User not found'}), 404
        
    # Get the incoming JSON data
    data = request.json
    
    # Update the user's details.
    # Use data.get() to update fields only if they are provided in the request.
    user['username'] = data.get('username', user['username'])
    user['email'] = data.get('email', user['email'])
    
    # Return the updated user data
    return jsonify(user)

## DELETE (DELETE) ##
# Route to delete a user
@app.route('/users/<int:user_id>', methods=['DELETE'])
def delete_user(user_id):
    global users  # We might modify the list
    
    # Find the user
    user = next((user for user in users if user['id'] == user_id), None)
    
    if not user:
        # If user doesn't exist, return 404
        return jsonify({'error': 'User not found'}), 404
    
    # Remove the user from the list
    users.remove(user)
    
    # Return a success message
    return jsonify({'message': f'User with id {user_id} deleted successfully'})

# --- Run the Application ---
if __name__ == '__main__':
    # Run the app in debug mode (provides helpful errors)
    # The default URL will be http://127.0.0.1:5000
    app.run(debug=True)
